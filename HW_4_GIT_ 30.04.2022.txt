GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.

Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.
***************************

JSON
===========================
 4. Создать внешний репозиторий c названием JSON.
+

============================
 5. Клонировать репозиторий JSON на локальный компьютер.

git clone https://github.com/Patamuschta/JSON.git

=============================
 6. Внутри локального JSON создать файл “new.json”.

 vim new.json


=============================
 7. Добавить файл под гит.


 git add new.json

=============================
 8. Закоммитить файл.

 git commit -m "create names.json"

=============================
 9. Отправить файл на внешний GitHub репозиторий.

 git push
  

=============================
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.

 vim new.json

{
        "name":"Elena",
        "surname":"Kozak",
        "age":"30",
        "numberOfPets":"0",
        "futureDesiredSalary":"1000000",

}

:wq


=============================
 11. Отправить изменения на внешний репозиторий.


 git add new.json  
 git status
 git commit -m "adding personal information new.json"
 git push


=============================
 12. Создать файл preferences.json

 vim preferens.json

=============================
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.



{
        "favoriteMuvie":"LordOfTheRings",
        "favoriteSeries":"Ведьмак",
        "favoriteFood":"плов",
        "favoritSeason":"summer",
        "sideYouWouldLikeToVisit":"NewZealand"
}

=============================
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON


 vim skills.json

{
        "skill_1":"workPostman",
        "skill_2":"REST-запрос"

}



=============================
 15. Отправить сразу 2 файла на внешний репозиторий.


 git add .
 git commit -am "adding personal information"          
 git push


=============================
 16. На веб интерфейсе создать файл bug_report.json.

+

=============================
 
17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

+

=============================
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.

{
  "Summary":"_",
  "Project":"_",
  "Component":"_",
  "Version":"_",
  "Severity":"_",
  "Priority":"_",
  "Status":"_",
  "Author":"_",
  "Assigned To":"_",
  "Description":"_",
  "Attachment":"_",
}

=============================
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

+

=============================
 20. Синхронизировать внешний и локальный репозиторий JSON


 git pull  


=============================
***************************

XML


 21. Создать внешний репозиторий c названием XML.

+

=============================
 22. Клонировать репозиторий XML на локальный компьютер.


 git clone https://github.com/Patamuschta/XML.git



=============================
 23. Внутри локального XML создать файл “new.xml”.

 vim new.xml

=============================
 24. Добавить файл под гит.

 git add new.xml

=============================
 25. Закоммитить файл.

 git commit -m "create new.xml"


=============================
 26. Отправить файл на внешний GitHub репозиторий.


 % git push


=============================
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.

 vim new.xml


<?xml version="1.0" encoding="UTF-8" ?>
<root>
  <name>Elena</name>
  <surname>Kozak</surname>
  <age>40</age>
  <numberOfPets>0</numberOfPets>
  <futureDesiredSalary>1000000</futureDesiredSalary>
</root>

:wq

=============================
 28. Отправить изменения на внешний репозиторий.

 git add new.xml
 git commit -m "adding new.xml"
 git push



=============================
 29. Создать файл preferences.xml

 vim preferences.xml

=============================
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.


<?xml version="1.0" encoding="UTF-8" ?>
<root>
  <favoriteMuvie>LordOfTheRings</favoriteMuvie>
  <favoriteSeries>Ведьмак</favoriteSeries>
  <favoriteFood>плов</favoriteFood>
  <favoritSeason>summer</favoritSeason>
  <sideYouWouldLikeToVisit>NewZealand</sideYouWouldLikeToVisit>
</root>


=============================
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML


<?xml version="1.0" encoding="UTF-8" ?>
<root>
  <skill_1>workPostman</skill_1>
  <skill_2>REST-запрос</skill_2>
</root>


=============================
 32. Сделать коммит в одну строку.


 git commit -am "adding personal information"


=============================
 33. Отправить сразу 2 файла на внешний репозиторий.

 git push


=============================
 34. На веб интерфейсе создать файл bug_report.xml.

+

=============================
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

+

=============================
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.

<?xml version="1.0" encoding="UTF-8" ?>
<root>
  <Summary>_</Summary>
  <Project>_</Project>
  <Component>_</Component>
  <Version>_</Version>
  <Severity>_</Severity>
  <Priority>_</Priority>
  <Status>_</Status>
  <Author>_</Author>
  <Description>_</Description>
  <Attachment>_</Attachment>
  <Assigned_To>_</Assigned_To>
</root>



=============================
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

+

=============================
 38. Синхронизировать внешний и локальный репозиторий XML

 git pull


=============================
***************************


TXT
 1. Создать внешний репозиторий c названием TXT.

+

=============================
 2. Клонировать репозиторий TXT на локальный компьютер.

 git clone https://github.com/Patamuschta/TXT.git

=============================
 3. Внутри локального TXT создать файл “new.txt”.

 vim new.txt 


=============================
 4. Добавить файл под гит.

 git add new.txt

=============================
 5. Закоммитить файл.

 git commit -m "create new.txt"

=============================
 6. Отправить файл на внешний GitHub репозиторий.

 git push

=============================
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.

ФИО: Козак Елена
возраст: 40
количество домашних животных: 0 
будущая желаемая зарплата: 1000000


=============================
 8. Отправить изменения на внешний репозиторий.

 git add new.txt
 git commit -m "adding personal information new.txt"
 git push

=============================
 9. Создать файл preferences.txt

vim preferences.txt  


=============================
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.

 vim preferences.txt

Любимый фильм: Властелин колец 
любимый сериал: Ведьмак
любимая еда: плов
любимое время года: лето 
страна которую хотели бы посетить: Новая Зеландия

:wq

=============================
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT

 vim skills.txt 

1. Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC.
2. Что такое клиент-серверная архитектура.
3. HTTP Методы запросов на сервер.
4. Коды ответов HTTP сервера.
5. Структуры HTTP запросов и ответов.
6. Что такое JSON, XML. Их структура.
7. Тестирование API через Postman (JS, автотесты API).
8. Снятие и чтение логов c внешнего сервера.
9. Снифинг http web трафика через Charles и Fiddler.
10. Dev Tools веб браузеров (Google Chrome, FireFox).
11. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)
12. Мобильное тестирование.
13. Особенность iOS, Android, гайдлайны.
14. Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят)
15. Сборка Android приложений на Android Studio.
16. ADB (управление андройд девайсами).
17. Настройка прокси и vpn на iOS и Android.
18. Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.
19. Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)
20. Основы bash скриптинг, автоматизация рутинных задач на сервере.
21. Доступ к удалённым серверам.
22. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).
23. База данных Postgres (установка, настройка и использование).
24. Нереляционная база данных Redis (установка, настройка и использование).
25. Нагрузочное тестирование в Jmeter.
26. Методология разработки Scrum.
27. Python. (Изучение основ. Создание клиент серверного приложения)

:wq


=============================
 12. Сделать коммит в одну строку.

 git commit -am "adding personal information"

=============================
 13. Отправить сразу 2 файла на внешний репозиторий.

 git push

=============================
 14. На веб интерфейсе создать файл bug_report.txt.

+

=============================
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

+

=============================
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.

Короткое описание 
Проект 
Компонент приложения
Номер версии 
Важность:
S1 Блокирующая (Blocker)
S2 Критическая (Critical)
S3 Значительная (Major)
S4 Незначительная (Minor)
S5 Тривиальная (Trivial)
Приоритет:
P1 Высокий (High)
P2 Средний (Medium)
P3 Низкий (Low)
Статус 
Автор
Назначен на 
Шаги воспроизведения 
Фактический Результат 
Ожидаемый результат 



=============================
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

+

=============================
 18. Синхронизировать внешний и локальный репозиторий TXT

 git pull






